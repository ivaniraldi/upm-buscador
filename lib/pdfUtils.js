// Check if we're in a browser environment
const isBrowser = typeof window !== "undefined"

// Cache para documentos procesados
const pdfCache = new Map()

// Configuraci√≥n de PDF.js
const PDFJS_CONFIG = {
  cMapUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/cmaps/',
  cMapPacked: true,
  standardFontDataUrl: 'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/standard_fonts/',
  disableFontFace: false,
  isEvalSupported: true,
  useSystemFonts: true,
  maxCanvasPixels: 16777216,
  disableStream: false,
  disableAutoFetch: false,
  disableRange: false,
  disableWorker: false,
  workerSrc: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js'
}

// Load PDF.js from CDN using script tag
async function loadPDFJS() {
  if (!isBrowser) {
    throw new Error("PDF.js not available in server environment")
  }

  // Check if PDF.js is already loaded
  if (window.pdfjsLib) {
    return window.pdfjsLib
  }

  return new Promise((resolve, reject) => {
    // Load PDF.js from CDN
    const script = document.createElement("script")
    script.src = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"
    script.onload = () => {
      if (window.pdfjsLib) {
        // Configure worker
        window.pdfjsLib.GlobalWorkerOptions.workerSrc = PDFJS_CONFIG.workerSrc
        resolve(window.pdfjsLib)
      } else {
        reject(new Error("PDF.js failed to load"))
      }
    }
    script.onerror = () => reject(new Error("Failed to load PDF.js script"))
    document.head.appendChild(script)
  })
}

// Funci√≥n mejorada para cargar y procesar PDFs
export async function loadPDFs() {
  if (!isBrowser) {
    console.warn("PDF loading not available in server environment")
    return getMockPDFs()
  }

  try {
    console.log("Intentando cargar PDFs reales...")

    // Load PDF.js dynamically
    const pdfjsLib = await loadPDFJS()

    // Lista de PDFs disponibles
    const pdfFiles = [
      {
        path: "/assets/pdfs/estandares-camineria.pdf",
        name: "estandares-camineria.pdf",
        displayName: "estandares-camineria",
        category: "Est√°ndares",
      },
      {
        path: "/assets/pdfs/estandares-generales.pdf",
        name: "estandares-generales.pdf",
        displayName: "estandares-generales",
        category: "Est√°ndares",
      },
      {
        path: "/assets/pdfs/estandares-operativos-carga-y-gestion-de-acopios.pdf",
        name: "estandares-operativos-carga-y-gestion-de-acopios.pdf",
        displayName: "estandares-operativos-carga-y-gestion-de-acopios",
        category: "Est√°ndares",
      },
      {
        path: "/assets/pdfs/estandares-operativos-cosecha-y-ext-madera.pdf",
        name: "estandares-operativos-cosecha-y-ext-madera.pdf",
        displayName: "estandares-operativos-cosecha-y-extraccion-madera",
        category: "Est√°ndares",
      },
      {
        path: "/assets/pdfs/estandares-operativos-vivero-san-francisco.pdf",
        name: "estandares-operativos-vivero-san-francisco.pdf",
        displayName: "estandares-operativos-vivero-san-francisco",
        category: "Est√°ndares",
      },
      {
        path: "/assets/pdfs/estandares-operativos-vivero-santana.pdf",
        name: "estandares-operativos-vivero-santana.pdf",
        displayName: "estandares-operativos-vivero-santana",
        category: "Est√°ndares",
      },
    ]

    const pdfs = []
    let realPdfsLoaded = 0

    for (const fileInfo of pdfFiles) {
      try {
        console.log(`Intentando cargar: ${fileInfo.path}`)
        const pdfData = await loadAndProcessPDF(fileInfo.path, pdfjsLib)

        if (pdfData) {
          pdfs.push({
            name: fileInfo.name,
            displayName: fileInfo.displayName,
            category: fileInfo.category,
            ...pdfData,
          })
          realPdfsLoaded++
          console.log(`‚úÖ PDF cargado exitosamente: ${fileInfo.displayName}`)
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error loading ${fileInfo.path}:`, error)
        // Agregar datos mock para este archivo espec√≠fico
        const mockData = getMockDataForFile(fileInfo)
        if (mockData) {
          pdfs.push(mockData)
        }
      }
    }

    // Si se cargaron algunos PDFs reales, usar esos
    if (realPdfsLoaded > 0) {
      console.log(`‚úÖ Se cargaron ${realPdfsLoaded} PDFs reales`)
      return pdfs
    }

    // Si no se pudieron cargar PDFs reales, usar datos mock completos
    console.warn("‚ö†Ô∏è No se pudieron cargar PDFs reales, usando datos mock")
    return getMockPDFs()
  } catch (error) {
    console.error("‚ùå Error general en loadPDFs:", error)
    return getMockPDFs()
  }
}

// Funci√≥n mejorada para cargar y procesar un PDF individual
async function loadAndProcessPDF(url, pdfjsLib) {
  if (!isBrowser || !pdfjsLib) {
    console.warn("PDF processing not available")
    return null
  }

  try {
    // Verificar cache primero
    if (pdfCache.has(url)) {
      console.log(`üìã Usando PDF desde cache: ${url}`)
      return pdfCache.get(url)
    }

    console.log(`üîÑ Cargando PDF: ${url}`)
    const response = await fetch(url)

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const arrayBuffer = await response.arrayBuffer()
    console.log(`üìÑ PDF descargado, tama√±o: ${arrayBuffer.byteLength} bytes`)

    // Configurar opciones de carga
    const loadingTask = pdfjsLib.getDocument({
      data: arrayBuffer,
      ...PDFJS_CONFIG
    })

    const pdf = await loadingTask.promise
    console.log(`üìñ PDF procesado, p√°ginas: ${pdf.numPages}`)

    const textContent = []
    const metadata = await pdf.getMetadata()
    const numPages = pdf.numPages

    // Procesar p√°ginas en paralelo con l√≠mite de concurrencia
    const concurrencyLimit = 3
    const chunks = []
    for (let i = 1; i <= numPages; i += concurrencyLimit) {
      chunks.push(Array.from({ length: Math.min(concurrencyLimit, numPages - i + 1) }, (_, j) => i + j))
    }

    for (const chunk of chunks) {
      await Promise.all(
        chunk.map(async (pageNum) => {
          try {
            const page = await pdf.getPage(pageNum)
            const content = await page.getTextContent()
            
            // Extraer texto con estructura
            const pageText = content.items.reduce((acc, item) => {
              // Agrupar por l√≠neas basado en la posici√≥n Y
              const lineKey = Math.round(item.transform[5])
              if (!acc[lineKey]) {
                acc[lineKey] = []
              }
              acc[lineKey].push(item.str)
              return acc
            }, {})

            // Procesar el texto l√≠nea por l√≠nea
            const processedLines = Object.entries(pageText)
              .sort(([a], [b]) => Number(a) - Number(b))
              .map(([_, words]) => words.join(' '))
              .join('\n')

            // Extraer im√°genes de la p√°gina
            let images = []
            try {
              images = await extractImagesFromPage(page)
            } catch (imgError) {
              console.warn(`‚ö†Ô∏è Error al extraer im√°genes de la p√°gina ${pageNum}:`, imgError)
            }

            if (processedLines) {
              // Limpiar y formatear el texto
              const cleanedText = cleanAndFormatText(processedLines)
              textContent.push({
                page: pageNum,
                text: cleanedText,
                images,
                pageSize: {
                  width: page.getViewport({ scale: 1 }).width,
                  height: page.getViewport({ scale: 1 }).height
                }
              })
            }
          } catch (pageError) {
            console.warn(`‚ö†Ô∏è Error procesando p√°gina ${pageNum}:`, pageError)
            // Agregar una entrada vac√≠a para mantener el orden de las p√°ginas
            textContent.push({
              page: pageNum,
              text: `Error al procesar la p√°gina ${pageNum}`,
              images: [],
              pageSize: { width: 0, height: 0 }
            })
          }
        })
      )
    }

    // Ordenar el contenido por n√∫mero de p√°gina
    textContent.sort((a, b) => a.page - b.page)

    const pdfData = {
      pages: numPages,
      textContent,
      size: arrayBuffer.byteLength,
      url,
      metadata: metadata?.info || {},
      title: metadata?.info?.Title || url.split('/').pop(),
      author: metadata?.info?.Author || 'Unknown',
      creationDate: metadata?.info?.CreationDate || null,
      lastModified: metadata?.info?.ModDate || null
    }

    // Guardar en cache
    pdfCache.set(url, pdfData)
    console.log(`‚úÖ PDF procesado y guardado en cache: ${url}`)

    return pdfData
  } catch (error) {
    console.error(`‚ùå Error processing PDF ${url}:`, error)
    return null
  }
}

// Funci√≥n mejorada para extraer im√°genes de una p√°gina
async function extractImagesFromPage(page) {
  try {
    const images = []
    const ops = await page.getOperatorList()
    const commonObjs = page.commonObjs
    const objs = page.objs
    
    // Esperar a que los objetos comunes est√©n resueltos
    await Promise.all(
      ops.fnArray.map(async (fn, i) => {
        if (fn === pdfjsLib.OPS.paintImageXObject) {
          const imgName = ops.argsArray[i][0]
          try {
            // Esperar a que el objeto de imagen est√© disponible
            const img = await new Promise((resolve, reject) => {
              const checkImage = () => {
                const image = objs.get(imgName)
                if (image) {
                  resolve(image)
                } else {
                  setTimeout(checkImage, 100)
                }
              }
              checkImage()
            })

            if (img && img.width > 100 && img.height > 100) {
              // Convertir la imagen a base64
              const canvas = document.createElement('canvas')
              const ctx = canvas.getContext('2d')
              canvas.width = img.width
              canvas.height = img.height
              
              // Dibujar la imagen en el canvas
              ctx.drawImage(img, 0, 0)
              
              // Obtener la imagen como base64
              const dataUrl = canvas.toDataURL('image/png')
              
              images.push({
                data: dataUrl,
                width: img.width,
                height: img.height,
                format: 'png'
              })
            }
          } catch (imgError) {
            console.warn(`‚ö†Ô∏è Error al procesar imagen ${imgName}:`, imgError)
          }
        }
      })
    )

    return images
  } catch (error) {
    console.warn('‚ö†Ô∏è Error al extraer im√°genes:', error)
    return []
  }
}

// Funci√≥n mejorada para limpiar y formatear texto
function cleanAndFormatText(text) {
  return text
    // Normalizar espacios y saltos de l√≠nea
    .replace(/\r\n/g, '\n')
    .replace(/\n{3,}/g, '\n\n')
    .replace(/\s+/g, ' ')
    
    // Preservar caracteres especiales del espa√±ol
    .replace(/[√°√†√§√¢]/g, '√°')
    .replace(/[√©√®√´√™]/g, '√©')
    .replace(/[√≠√¨√Ø√Æ]/g, '√≠')
    .replace(/[√≥√≤√∂√¥]/g, '√≥')
    .replace(/[√∫√π√º√ª]/g, '√∫')
    .replace(/[√±]/g, '√±')
    .replace(/[√Å√Ä√Ñ√Ç]/g, '√Å')
    .replace(/[√â√à√ã√ä]/g, '√â')
    .replace(/[√ç√å√è√é]/g, '√ç')
    .replace(/[√ì√í√ñ√î]/g, '√ì')
    .replace(/[√ö√ô√ú√õ]/g, '√ö')
    .replace(/[√ë]/g, '√ë')
    
    // Detectar y formatear t√≠tulos
    .replace(/^([A-Z√Å√â√ç√ì√ö√ë][A-Z√Å√â√ç√ì√ö√ë\s]{3,}[A-Z√Å√â√ç√ì√ö√ë])([.:])(\s|$)/gm, '## $1$2\n')
    .replace(/^([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±A-Z√Å√â√ç√ì√ö√ë\s]{2,}):(\s|$)/gm, '### $1:\n')
    
    // Detectar y formatear listas
    .replace(/^(\d+\.\s+[^.]+\.)/gm, '- $1')
    .replace(/^‚Ä¢\s+([^‚Ä¢]+)(?=‚Ä¢|$)/gm, '- $1')
    
    // Detectar y formatear tablas
    .replace(/(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/g, '| $1 | $2 | $3 | $4 |')
    
    // Detectar y formatear medidas y unidades
    .replace(/(\d+(?:\.\d+)?)\s*(mm|cm|m|kg|g|L|ml)/g, '$1$2')
    
    // Limpiar caracteres especiales problem√°ticos manteniendo los del espa√±ol
    .replace(/[^\w\s.,:;!?\-()[\]]/g, ' ')
    
    // Asegurar espacios correctos entre palabras
    .replace(/(\w)\s+(\w)/g, '$1 $2')
    
    // Formatear p√°rrafos
    .replace(/([^<>]+)(?=<|$)/g, (match) => {
      if (match.trim() && !match.startsWith('-') && !match.startsWith('#')) {
        return `\n${match.trim()}\n`
      }
      return match
    })
    
    .trim()
}

// Funci√≥n mejorada para formatear el contenido del PDF para visualizaci√≥n
export function formatPDFContent(text) {
  if (!text) return ""

  return text
    // Formatear t√≠tulos
    .replace(/^## (.*?)$/gm, '<h2 class="text-2xl font-bold mt-8 mb-4 text-gray-900">$1</h2>')
    .replace(/^### (.*?)$/gm, '<h3 class="text-xl font-semibold mt-6 mb-3 text-gray-800">$1</h3>')
    
    // Formatear listas
    .replace(/^- (.*?)$/gm, '<li class="ml-6 list-disc mb-2 text-gray-700">$1</li>')
    .replace(/(<li[^>]*>.*<\/li>)+/g, '<ul class="my-4">$&</ul>')
    
    // Formatear tablas
    .replace(/\| (.*?) \|/g, (match) => {
      const cells = match.split('|').filter(cell => cell.trim())
      return `<td class="border border-gray-300 px-4 py-2">${cells.join('</td><td class="border border-gray-300 px-4 py-2">')}</td>`
    })
    .replace(/(<td[^>]*>.*<\/td>)+/g, '<tr class="border-b border-gray-300">$&</tr>')
    .replace(/(<tr[^>]*>.*<\/tr>)+/g, '<table class="w-full border-collapse my-4">$&</table>')
    
    // Formatear p√°rrafos
    .replace(/\n\n([^<]+)\n\n/g, '<p class="mb-4 text-gray-700 leading-relaxed">$1</p>')
    
    // Formatear t√©rminos importantes
    .replace(
      /(Requisitos|Especificaciones|Criterios|Objetivo|Alcance|Responsabilidades|Proceso|Materiales|Herramientas):/g,
      '<strong class="font-semibold text-gray-900">$1:</strong>'
    )
    
    // Formatear medidas y unidades
    .replace(
      /(\d+(?:\.\d+)?)(mm|cm|m|kg|g|L|ml)/g,
      '<span class="font-mono text-blue-700">$1</span><span class="text-blue-600">$2</span>'
    )
    
    // Formatear notas y advertencias
    .replace(
      /(NOTA|ADVERTENCIA|IMPORTANTE):(.*?)(?=\n\n|$)/g,
      '<div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4"><strong class="text-yellow-800">$1:</strong><span class="text-yellow-700">$2</span></div>'
    )
}

function getMockDataForFile(fileInfo) {
  const mockData = getMockPDFs()
  return mockData.find((pdf) => pdf.displayName === fileInfo.displayName || pdf.category === fileInfo.category)
}

// Mock data for when PDFs are not available
function getMockPDFs() {
  return [
    {
      name: "documento-tecnico-1.pdf",
      displayName: "Documento T√©cnico de Calidad",
      category: "t√©cnico",
      pages: 25,
      size: 1024000,
      textContent: [
        {
          page: 1,
          text: "DOCUMENTO T√âCNICO DE CALIDAD\n\nEste documento establece los procedimientos y est√°ndares t√©cnicos para la implementaci√≥n de sistemas de gesti√≥n de calidad en organizaciones industriales. El objetivo principal es garantizar la conformidad con las normas internacionales ISO 9001:2015.\n\nAlcance del Documento:\n‚Ä¢ Procedimientos de control de calidad\n‚Ä¢ Metodolog√≠as de inspecci√≥n\n‚Ä¢ Criterios de aceptaci√≥n y rechazo\n‚Ä¢ Documentaci√≥n requerida\n\nResponsabilidades:\nEl departamento de calidad ser√° responsable de la implementaci√≥n y seguimiento de todos los procedimientos descritos en este documento.",
        },
        {
          page: 2,
          text: "CAP√çTULO 2: METODOLOG√çAS Y PROCESOS\n\nEste cap√≠tulo describe las metodolog√≠as recomendadas para la implementaci√≥n de est√°ndares t√©cnicos en organizaciones. Se incluyen diagramas de flujo y procedimientos paso a paso para garantizar una implementaci√≥n exitosa.\n\nProceso de Implementaci√≥n:\n1. Diagn√≥stico inicial: Evaluaci√≥n del estado actual\n2. Planificaci√≥n: Desarrollo del plan de implementaci√≥n\n3. Ejecuci√≥n: Implementaci√≥n de los cambios\n4. Verificaci√≥n: Auditor√≠as y revisiones\n5. Mejora continua: Optimizaci√≥n del sistema\n\nHerramientas requeridas:\n‚Ä¢ Software de gesti√≥n documental\n‚Ä¢ Equipos de medici√≥n calibrados\n‚Ä¢ Personal capacitado",
        },
        {
          page: 3,
          text: "SECCI√ìN 3: HERRAMIENTAS DE EVALUACI√ìN\n\nPresenta las herramientas necesarias para evaluar la conformidad con los est√°ndares establecidos. Incluye listas de verificaci√≥n y criterios de auditor√≠a.\n\nLista de Verificaci√≥n Principal:\n‚Ä¢ Documentaci√≥n actualizada\n‚Ä¢ Procedimientos implementados\n‚Ä¢ Personal capacitado\n‚Ä¢ Equipos calibrados\n‚Ä¢ Registros de calidad completos\n\nCriterios de Auditor√≠a:\n‚Ä¢ Conformidad con ISO 9001:2015\n‚Ä¢ Efectividad de los procesos\n‚Ä¢ Satisfacci√≥n del cliente\n‚Ä¢ Mejora continua demostrable",
        },
      ],
    },
    {
      name: "norma-iso-9001.pdf",
      displayName: "Norma ISO 9001:2015",
      category: "normativo",
      pages: 45,
      size: 2048000,
      textContent: [
        {
          page: 1,
          text: "NORMA INTERNACIONAL ISO 9001:2015\n\nSistemas de gesti√≥n de calidad - Requisitos\n\nISO 9001 es un est√°ndar internacional que especifica los requisitos para un sistema de gesti√≥n de calidad. Las organizaciones utilizan este est√°ndar para demostrar su capacidad de proporcionar productos y servicios que satisfagan los requisitos del cliente y los reglamentarios aplicables.\n\nBeneficios de la implementaci√≥n:\n‚Ä¢ Mejora de la satisfacci√≥n del cliente\n‚Ä¢ Reducci√≥n de costos operativos\n‚Ä¢ Aumento de la eficiencia\n‚Ä¢ Mejor gesti√≥n de riesgos\n‚Ä¢ Acceso a nuevos mercados",
        },
        {
          page: 2,
          text: "PRINCIPIOS DE GESTI√ìN DE CALIDAD\n\nLa norma ISO 9001:2015 se basa en siete principios fundamentales:\n\n1. Enfoque al cliente: Cumplir y superar las expectativas del cliente\n2. Liderazgo: Crear y mantener un ambiente interno\n3. Participaci√≥n del personal: Involucrar a todo el personal\n4. Enfoque basado en procesos: Gestionar actividades como procesos\n5. Mejora continua: Mejorar constantemente el desempe√±o\n6. Toma de decisiones basada en evidencia: Basar decisiones en datos\n7. Gesti√≥n de las relaciones: Gestionar relaciones con partes interesadas",
        },
        {
          page: 3,
          text: "CAP√çTULO 4: CONTEXTO DE LA ORGANIZACI√ìN\n\n4.1 Comprensi√≥n de la organizaci√≥n y su contexto\n\nLa organizaci√≥n debe determinar las cuestiones externas e internas que son pertinentes para su prop√≥sito y que afectan a su capacidad para lograr los resultados previstos de su sistema de gesti√≥n de calidad.\n\nFactores externos:\n‚Ä¢ Entorno legal y reglamentario\n‚Ä¢ Competencia y mercado\n‚Ä¢ Factores tecnol√≥gicos\n‚Ä¢ Factores culturales y sociales\n\nFactores internos:\n‚Ä¢ Cultura organizacional\n‚Ä¢ Recursos disponibles\n‚Ä¢ Estructura organizacional\n‚Ä¢ Capacidades y conocimientos",
        },
        {
          page: 4,
          text: "CAP√çTULO 5: LIDERAZGO\n\n5.1 Liderazgo y compromiso\n\nLa alta direcci√≥n debe demostrar liderazgo y compromiso con respecto al sistema de gesti√≥n de calidad:\n\n‚Ä¢ Asumiendo la responsabilidad y obligaci√≥n de rendir cuentas\n‚Ä¢ Asegur√°ndose de que se establezcan la pol√≠tica y los objetivos de calidad\n‚Ä¢ Asegur√°ndose de la integraci√≥n de los requisitos del SGC\n‚Ä¢ Promoviendo el uso del enfoque a procesos\n‚Ä¢ Asegur√°ndose de que los recursos necesarios est√©n disponibles\n‚Ä¢ Comunicando la importancia de una gesti√≥n de calidad eficaz\n‚Ä¢ Asegur√°ndose de que el SGC logre los resultados previstos\n‚Ä¢ Dirigiendo y apoyando a las personas\n‚Ä¢ Promoviendo la mejora continua",
        },
      ],
    },
    {
      name: "procedimiento-calidad.pdf",
      displayName: "Procedimiento de Control de Calidad",
      category: "procedimiento",
      pages: 15,
      size: 512000,
      textContent: [
        {
          page: 1,
          text: "PROCEDIMIENTO DE CONTROL DE CALIDAD\n\nC√≥digo: PC-001\nVersi√≥n: 2.1\nFecha: 2024\n\nEste documento establece los pasos necesarios para implementar un sistema de control de calidad efectivo en la organizaci√≥n. Define responsabilidades y metodolog√≠as de inspecci√≥n para garantizar la conformidad con los est√°ndares establecidos.\n\nObjetivo:\nAsegurar que todos los productos y servicios cumplan con los requisitos de calidad especificados mediante la implementaci√≥n de controles sistem√°ticos y verificaciones continuas.",
        },
        {
          page: 2,
          text: "PROCESO DE INSPECCI√ìN DETALLADO\n\n1. Recepci√≥n de materiales:\n‚Ä¢ Verificar documentaci√≥n de entrega\n‚Ä¢ Inspecci√≥n visual inicial\n‚Ä¢ Toma de muestras seg√∫n plan de muestreo\n‚Ä¢ Registro de entrada en sistema\n\n2. Verificaci√≥n de especificaciones:\n‚Ä¢ Comparar con especificaciones t√©cnicas\n‚Ä¢ Verificar dimensiones y tolerancias\n‚Ä¢ Comprobar propiedades f√≠sicas y qu√≠micas\n‚Ä¢ Documentar desviaciones identificadas\n\n3. Pruebas de conformidad:\n‚Ä¢ Realizar pruebas seg√∫n normas aplicables\n‚Ä¢ Utilizar equipos calibrados\n‚Ä¢ Registrar todos los resultados\n‚Ä¢ Analizar tendencias y patrones",
        },
        {
          page: 3,
          text: "CRITERIOS DE ACEPTACI√ìN Y DOCUMENTACI√ìN\n\nCriterios de Aceptaci√≥n:\nLos productos deben cumplir con todas las especificaciones t√©cnicas establecidas:\n‚Ä¢ Tolerancias dimensionales: ¬±0.1mm\n‚Ä¢ Acabado superficial: Ra ‚â§ 3.2Œºm\n‚Ä¢ Resistencia mec√°nica: seg√∫n norma ASTM\n‚Ä¢ Pruebas el√©ctricas: 100% conformidad\n\nDocumentaci√≥n Requerida:\n‚Ä¢ Certificados de materiales\n‚Ä¢ Informes de inspecci√≥n\n‚Ä¢ Registros de calibraci√≥n\n‚Ä¢ No conformidades identificadas\n‚Ä¢ Acciones correctivas implementadas\n\nCualquier desviaci√≥n debe ser documentada y evaluada por el equipo de calidad para determinar la aceptabilidad del producto.",
        },
      ],
    },
    {
      name: "guia-implementacion.pdf",
      displayName: "Gu√≠a de Implementaci√≥n de Est√°ndares",
      category: "gu√≠a",
      pages: 30,
      size: 1536000,
      textContent: [
        {
          page: 1,
          text: "GU√çA DE IMPLEMENTACI√ìN DE EST√ÅNDARES\n\nManual Pr√°ctico para Organizaciones\n\nEsta gu√≠a proporciona instrucciones paso a paso para implementar est√°ndares de calidad en diferentes tipos de organizaciones. Incluye ejemplos pr√°cticos, casos de estudio y herramientas √∫tiles para facilitar el proceso de implementaci√≥n.\n\nContenido de la Gu√≠a:\n‚Ä¢ Metodolog√≠a de implementaci√≥n\n‚Ä¢ Herramientas y plantillas\n‚Ä¢ Casos de estudio reales\n‚Ä¢ Mejores pr√°cticas\n‚Ä¢ Indicadores de √©xito\n\nAudiencia objetivo:\n‚Ä¢ Gerentes de calidad\n‚Ä¢ Consultores especializados\n‚Ä¢ Auditores internos\n‚Ä¢ Personal de mejora continua",
        },
        {
          page: 2,
          text: "FASE 1: DIAGN√ìSTICO INICIAL\n\nEvaluaci√≥n del estado actual de la organizaci√≥n\n\nEsta fase incluye la identificaci√≥n de brechas con respecto a los est√°ndares objetivo mediante:\n\nAn√°lisis de Procesos:\n‚Ä¢ Mapeo de procesos actuales\n‚Ä¢ Identificaci√≥n de entradas y salidas\n‚Ä¢ An√°lisis de flujos de trabajo\n‚Ä¢ Detecci√≥n de redundancias\n‚Ä¢ Evaluaci√≥n de eficiencia\n\nEvaluaci√≥n de Recursos:\n‚Ä¢ Personal disponible y competencias\n‚Ä¢ Infraestructura existente\n‚Ä¢ Tecnolog√≠a y sistemas\n‚Ä¢ Recursos financieros\n‚Ä¢ Documentaci√≥n actual\n\nHerramientas recomendadas:\n‚Ä¢ Matriz de diagn√≥stico GAP\n‚Ä¢ Cuestionarios de autoevaluaci√≥n\n‚Ä¢ Entrevistas estructuradas\n‚Ä¢ Observaci√≥n directa de procesos",
        },
        {
          page: 3,
          text: "FASE 2: PLANIFICACI√ìN ESTRAT√âGICA\n\nDesarrollo del plan de implementaci√≥n\n\nEsta fase establece el roadmap para la implementaci√≥n exitosa:\n\nCronograma Detallado:\n‚Ä¢ Hitos principales y entregables\n‚Ä¢ Secuencia de actividades\n‚Ä¢ Dependencias cr√≠ticas\n‚Ä¢ Recursos asignados por fase\n‚Ä¢ Fechas de revisi√≥n y evaluaci√≥n\n\nGesti√≥n de Recursos:\n‚Ä¢ Presupuesto total y por fase\n‚Ä¢ Asignaci√≥n de personal\n‚Ä¢ Capacitaci√≥n requerida\n‚Ä¢ Tecnolog√≠a necesaria\n‚Ä¢ Proveedores externos\n\nDefinici√≥n de Indicadores:\n‚Ä¢ KPIs de proceso\n‚Ä¢ M√©tricas de calidad\n‚Ä¢ Indicadores financieros\n‚Ä¢ Satisfacci√≥n del cliente\n‚Ä¢ Criterios de √©xito espec√≠ficos",
        },
        {
          page: 4,
          text: "ALAMBRADO Y CERCADO PERIMETRAL\n\nMateriales necesarios para alambrado:\n‚Ä¢ Postes de madera tratada o concreto cada 3 metros\n‚Ä¢ Alambre galvanizado calibre 12.5\n‚Ä¢ Grampas galvanizadas para fijaci√≥n\n‚Ä¢ Tensores y templadores\n‚Ä¢ Aisladores para cercas el√©ctricas si aplica\n\nHerramientas requeridas:\n‚Ä¢ Cavadora de hoyos\n‚Ä¢ Martillo\n‚Ä¢ Alicates\n‚Ä¢ Nivel\n‚Ä¢ Cinta m√©trica\n‚Ä¢ Barreta\n\nProceso de instalaci√≥n:\n1. Marcar el per√≠metro y ubicaci√≥n de postes\n2. Cavar hoyos de 60cm de profundidad\n3. Instalar postes verificando verticalidad\n4. Tender alambre comenzando por la l√≠nea superior\n5. Tensar alambre uniformemente\n6. Fijar con grampas cada 30cm\n\nEspecificaciones t√©cnicas:\n‚Ä¢ Altura m√≠nima 1.5 metros\n‚Ä¢ Distancia entre postes m√°ximo 3 metros\n‚Ä¢ Tensi√≥n del alambre 150-200 kg\n‚Ä¢ Profundidad de postes m√≠nimo 60cm",
        },
        {
          page: 5,
          text: "MANTENIMIENTO DE ALAMBRADO\n\nInspecci√≥n peri√≥dica:\n‚Ä¢ Revisar tensi√≥n del alambre mensualmente\n‚Ä¢ Verificar estado de postes y grampas\n‚Ä¢ Controlar vegetaci√≥n que pueda afectar la cerca\n‚Ä¢ Reparar da√±os inmediatamente\n\nMateriales de repuesto recomendados:\n‚Ä¢ Alambre galvanizado de repuesto\n‚Ä¢ Grampas adicionales\n‚Ä¢ Postes de reemplazo\n‚Ä¢ Herramientas de tensado\n\nVida √∫til esperada:\n‚Ä¢ Alambre galvanizado 15-20 a√±os\n‚Ä¢ Postes de madera tratada 10-15 a√±os\n‚Ä¢ Postes de concreto 25-30 a√±os\n\nFactores que afectan durabilidad:\n‚Ä¢ Condiciones clim√°ticas\n‚Ä¢ Calidad de materiales\n‚Ä¢ Instalaci√≥n correcta\n‚Ä¢ Mantenimiento regular",
        },
      ],
    },
  ]
}

// Funci√≥n mejorada para buscar en PDFs
export async function searchInPDFs(pdfs, query) {
  if (!isBrowser) {
    console.warn("Search not available in server environment")
    return []
  }
  if (!query.trim() || pdfs.length === 0) return []

  console.log(`üîç Buscando "${query}" en ${pdfs.length} documentos...`)

  const searchTerms = query
    .toLowerCase()
    .split(/\s+/)
    .filter((term) => term.length > 2)
  const results = []

  for (const pdf of pdfs) {
    if (!pdf.textContent) continue

    for (const pageContent of pdf.textContent) {
      const pageText = pageContent.text.toLowerCase()
      let score = 0
      let matches = 0
      let matchPositions = []

      // Buscar cada t√©rmino
      for (const term of searchTerms) {
        const termMatches = (pageText.match(new RegExp(term, "g")) || []).length
        if (termMatches > 0) {
          score += termMatches
          matches += termMatches
          
          // Guardar posiciones de coincidencias
          let match
          const regex = new RegExp(term, "g")
          while ((match = regex.exec(pageText)) !== null) {
            matchPositions.push(match.index)
          }
        }
      }

      if (score > 0) {
        // Crear contexto alrededor de las coincidencias
        const contexts = matchPositions.map(pos => createContext(pageContent.text, pos, 200))
        
        results.push({
          fileName: pdf.displayName,
          page: pageContent.page,
          contexts,
          score: score / searchTerms.length,
          matches,
          fullText: pageContent.text,
          url: pdf.url,
          category: pdf.category,
          title: pdf.title
        })
      }
    }
  }

  // Ordenar por relevancia
  const sortedResults = results.sort((a, b) => b.score - a.score).slice(0, 20)
  console.log(`‚úÖ Encontrados ${sortedResults.length} resultados`)

  return sortedResults
}

// Funci√≥n mejorada para crear contexto alrededor de una coincidencia
function createContext(text, position, contextLength = 200) {
  const start = Math.max(0, position - contextLength / 2)
  const end = Math.min(text.length, position + contextLength / 2)

  let context = text.substring(start, end)

  if (start > 0) context = "..." + context
  if (end < text.length) context = context + "..."

  return context
}

function formatFileName(fileName) {
  return fileName
    .replace(/\.[^/.]+$/, "") // Remover extensi√≥n
    .replace(/[-_]/g, " ") // Reemplazar guiones y guiones bajos
    .replace(/\b\w/g, (l) => l.toUpperCase()) // Capitalizar palabras
}

function getCategoryFromFileName(fileName) {
  const name = fileName.toLowerCase()

  if (name.includes("norma") || name.includes("iso")) return "normativo"
  if (name.includes("procedimiento")) return "procedimiento"
  if (name.includes("guia") || name.includes("manual")) return "gu√≠a"
  if (name.includes("tecnico")) return "t√©cnico"

  return "documento"
}
